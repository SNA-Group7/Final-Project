---
title: "SNAP"
author: "Group 7"
date: today
execute:
  echo: false
format: 
  pdf:
          }
          \fancyfoot[C]{\thepage}
      output-file: "SNAP"
      output-ext: "pdf"
      toc: true
      toc-depth: 4
      shift-heading-level-by: 2
      fig-pos: "H"
      fig-cap-location: top
      geometry:
        - top=1in
        - right=.8in
        - bottom=1in
        - left=.8in
      link-citations: true
      linkcolor: blue
      include-in-header: 
            }
        text: |
          \usepackage{fancyhdr}
          \usepackage{titling}
          \pagestyle{fancy}
          \fancyhf{}
          \renewcommand\maketitle{
            \fancyhead[C]{
              \thetitle
              \ifx \theauthor\empty  \else \ – \theauthor \fi
              \ifx \thedate\empty  \else \ – \thedate \ \fi
editor: 
  markdown: 
    wrap: sentence
---

```{r}
#| label: libraries
#| echo: false
#| output: false
#| message: false

rm(list=ls())

# Start with a clear environment
rm(list=ls())

# Load necessary packages
if (!"devtools" %in% installed.packages()) install.packages("devtools") ## for the install_version function
library(devtools)
if (!"RSiena" %in% installed.packages()) install.packages("RSiena") ## install latest version 
library(RSiena)
packageVersion("RSiena")
library(statnet)
library(readr)
library(dplyr)
library(tidyr)
library(sna)
library(igraph)



# ---------------------------------------------------------------------------------------------
# Set the working directory:
# Session > Set Working Directory > To Source File Location
# ---------------------------------------------------------------------------------------------
list.files() # List the files in the current working directory to see if you're in the right directory

# For more information about the packages we're using in this lab...
# ?RSiena
# ?sienaNet
```

# Dataset Preprocessing

## Prune the Dataset

```{r}
test <- read_csv("venmo.csv", n_max=1)
```

```{r}
## Process Raw Dataset ##
# Read and Shrink Dataset
selected_columns <- c("_id", 
                      "date_updated",
                      "payment.actor.username", 
                      "payment.target.user.username",
                      "note",
                      "app.description",
                      "payment.action")

venmo_df <- read_csv("venmo.csv", col_select = all_of(selected_columns), n_max=7000000)
venmo_df <- venmo_df %>%
  rename(
    date = date_updated,
    sender = payment.actor.username,
    recipient = payment.target.user.username,
    note = note,
    phone_type = app.description,
    payment_type = payment.action
  )

# Remove Null Rows # Move this above
venmo_df <- venmo_df %>%
  filter(complete.cases(date, sender, recipient, note, phone_type, payment_type))

## Snowballing (Want to include popular users, their friends, and the friends of their friends)
# Unique Interactions (All components should be at least size 10)
unique_interactions <- venmo_df %>%
  rowwise() %>%
  mutate(interaction = paste(sort(c(sender, recipient)), collapse = "_")) %>%
  distinct(interaction, .keep_all = TRUE)

# Get Popular Users (10+ Transactions)
popular_threshold <- 10
popular_users <- unique_interactions %>%
  pivot_longer(cols = c(sender, recipient), names_to = "type", values_to = "username") %>%
  count(username, name = "count") %>%
  arrange(desc(count)) %>%
  filter(count > popular_threshold)
# Get Friends of Popular Users (Transaction with Popular User)
popular_usernames <- popular_users$username
friends_of_popular_users <- venmo_df %>%
  filter(sender %in% popular_usernames | recipient %in% popular_usernames)

users_of_interest <- friends_of_popular_users %>%
  select(sender, recipient) %>%
  pivot_longer(cols = c(sender, recipient), names_to = "type", values_to = "username") 


# Get Shrunk Dataset
usernames_of_interest = users_of_interest$username
pruned_venmo_df <- venmo_df %>%
  filter(sender %in% usernames_of_interest | recipient %in% usernames_of_interest)

# Save it
write.csv(pruned_venmo_df, file = "pruned_venmo.csv", row.names = FALSE)

```

```{r}
## Prep Datasets ##
# Load Dataset
pruned_venmo_df <- read_csv("pruned_venmo.csv")
head(pruned_venmo_df)

# Transactions
all_transaction_df <- pruned_venmo_df[, c("sender", "recipient", "payment_type")]

# Phone Type
phone_df <- pruned_venmo_df[, c("sender", "phone_type")]
phone_df <- phone_df[!duplicated(phone_df$sender), ]
non_senders <- setdiff(pruned_venmo_df$recipient, unique(pruned_venmo_df$sender))
non_senders_df <- data.frame(
  sender = non_senders,
  phone_type = "unknown",
  stringsAsFactors = FALSE
)
phone_df <- rbind(phone_df, non_senders_df)
phone_df$phone_type[!(phone_df$phone_type %in% c("Venmo for Android", "Venmo for iPhone", "unknown"))] <- "other" #Known venmo application but not Apple or Android
```

## Construct the Networks

```{r}
## Build the Networks ##
#detach("package:igraph", unload = TRUE)
#library(network)
#Full Network#
all_transactions_net <- graph_from_data_frame(d = all_transaction_df, 
                                              directed = TRUE, 
                                              vertices = NULL)
# Label Directed Links
E(all_transactions_net)$type <- all_transaction_df$payment_type
# Add Phone Types
phone_types <- setNames(phone_df$phone_type, phone_df$sender)
V(all_transactions_net)$phone_type <- phone_types[V(all_transactions_net)$name]

edge_attr(all_transactions_net)
vertex_attr(all_transactions_net)
vcount(all_transactions_net)
ecount(all_transactions_net)
table(E(all_transactions_net)$type)
table(V(all_transactions_net)$phone_type)
```

# Descriptive Analysis

```{r}
library(igraph)
library(intergraph)
## Network Descriptions ##
# Full Network #
# Components 
all_comp <- components(all_transactions_net); all_comp$no
all_comp$csize
giantGraph_all <- all_transactions_net %>% 
  induced_subgraph(., which(all_comp$membership == which.max(all_comp$csize)))
print(vcount(giantGraph_all)) # Nodes
print(ecount(giantGraph_all)) # Edges
graph.density(giantGraph_all)
table(E(giantGraph_all)$type)
table(V(giantGraph_all)$phone_type)

plot(giantGraph_all, vertex.size = 1, vertex.label = NA)
```

```{r}
```

# Community Detection

```{r}
## Clustering All ##
cluster_all <- giantGraph_all %>% cluster_infomap()
community_membership_all <- membership(cluster_all) 

length(cluster_all) # Number of clusters
sizes(cluster_all)  # Size of Clusters
modularity(cluster_all) # How well-defined the clusters are

cluster_all %>% plot(
  .,
  giantGraph_all,
  # layout = layout_with_gem(.),
  layout = layout_with_fr(giantGraph_all),
  edge.arrow.size = .3,
  vertex.size = 4,
  vertex.label = NA,
  vertex.color = adjustcolor(membership(.), alpha.f = .3),
  vertex.label.cex = .5,
  vertex.label.color = 'black',
  mark.groups = by(seq_along(membership(.)), membership(.), invisible),
  mark.shape = 1 / 4,
  mark.col = rainbow(length(.), alpha = .1),
  mark.border = NA
)
```

## Influencers

```{r}
# Find Influencers #
# All
indegrees <- degree(giantGraph_all, mode = "in")
influencer_nodes <- order(indegrees, decreasing = TRUE)[1:1000]
global_influencers = data.frame(username = V(giantGraph_all)$name[influencer_nodes],
                                indegree = indegrees[influencer_nodes])
# Per Community
community_influencers <- data.frame(
  username = character(),
  indegree = integer(),
  community = integer())
# Loop over each community
for (community in unique(community_membership)) {
  community_nodes <- V(giantGraph_all)[community_membership == community]
    
  # Get Community Influencer
  indegrees <- degree(giantGraph_all, mode = "in", v = community_nodes)
  influencer_indegree_value <- max(indegrees)
  influencer_node <- which(indegrees == influencer_indegree_value)
  influencer_username <- V(giantGraph_all)$name[community_nodes][influencer_node]
  # Add to Dataframe
  influencer <- data.frame(
    username = influencer_username,
    indegree = influencer_indegree_value,
    community = community)
  community_influencers <- rbind(community_influencers, influencer)  
}
```

### Comparing Global vs. Local Influencers

```{r}
# Global
global_influencers <- merge(global_influencers, phone_df, by.x = "username", by.y = "sender", all.x = TRUE)
# Top 1000
global_influencers <- global_influencers[order(-global_influencers$indegree), ]
top_1000_global_influencers <- head(global_influencers, 1000)
table(top_50_global_influencers$phone_type)

#Get edge types 
top_1000_global_influencers$in_pay_count <- NA
top_1000_global_influencers$in_charge_count <- NA
top_1000_global_influencers$out_pay_count <- NA
top_1000_global_influencers$out_charge_count <- NA
for (i in seq(1, 1000)) {
  username <- top_1000_global_influencers$username[i]
  user_vertex <- V(giantGraph_all)[name == username]
  
  incoming_edges <- incident(giantGraph_all, user_vertex, mode = "in")
  in_edge_attributes <- get.edge.attribute(giantGraph_all, name = "type", index = incoming_edges)
  
  top_1000_global_influencers$in_pay_count[i] <- sum(in_edge_attributes == "pay")
  top_1000_global_influencers$in_charge_count[i] <- sum(in_edge_attributes == "charge")
  
  outgoing_edges <- incident(giantGraph_all, user_vertex, mode = "out")
  out_edge_attributes <- get.edge.attribute(giantGraph_all, name = "type", index = outgoing_edges)
  
  top_1000_global_influencers$out_pay_count[i] <- sum(out_edge_attributes == "pay")
  top_1000_global_influencers$out_charge_count[i] <- sum(out_edge_attributes == "charge")
  
}

head(top_1000_global_influencers)
top_50_global_influencers <- head(top_1000_global_influencers, 50)
table(top_50_global_influencers$phone_type)

# Edge Type Comparisons
#1000
mean(top_1000_global_influencers$in_pay_count, na.rm = TRUE)
mean(top_1000_global_influencers$in_charge_count, na.rm = TRUE)
sum(top_1000_global_influencers$in_pay_count == 0) #473
sum(top_1000_global_influencers$in_charge_count == 0) #822

mean(top_1000_global_influencers$out_pay_count, na.rm = TRUE)# 2.316
mean(top_1000_global_influencers$out_charge_count, na.rm = TRUE)# 0.502
sum(top_1000_global_influencers$out_pay_count == 0) #473
sum(top_1000_global_influencers$out_charge_count == 0) #822

#50
mean(top_50_global_influencers$in_pay_count, na.rm = TRUE)
mean(top_50_global_influencers$in_charge_count, na.rm = TRUE)
sum(top_50_global_influencers$in_pay_count == 0) 
sum(top_50_global_influencers$in_charge_count == 0)

mean(top_50_global_influencers$out_pay_count, na.rm = TRUE)
mean(top_50_global_influencers$out_charge_count, na.rm = TRUE)
sum(top_50_global_influencers$out_pay_count == 0) 
sum(top_50_global_influencers$out_charge_count == 0) 
  

# Local
community_influencers <- merge(community_influencers, phone_df, by.x = "username", by.y = "sender", all.x = TRUE)
table(community_influencers$phone_type)


# Compare Directly - Check if Global Influencers appear as Local Influencers in multiple communities
top_50_global_influencers <- head(global_influencers, 50)
community_counts <- table(community_influencers$username)
global_influencer_counts <- community_counts[top_50_global_influencers$username]
global_influencer_counts[is.na(global_influencer_counts)] <- 0
global_influencer_counts
community_counts
```

# ERGM

Our point of interest is identifying which factors make influencers distinct from other, casual Venmo users. The following hypotheses were developed for the purposes of our inquiry:

H1: Users with the same phone type are more likely to send transactions to each other than users with different phone types. H2: Influencers (users with a high indegree) are more likely to have high betweenness and eigenvector centrality than other users. H3: Users who are connected to key influencers (high centrality users) are more likely to have increased transaction activity. H4: Users with an iOS are more likely to send money rather than receive it. H5: Influencers are more likely to engage in reciprocal sending and receiving behavior. H6: The overall network has a small-world structure, where influencers connect different parts of the network.

are influencers influencers because they're charging people or bc theyre paying people

```{r}
library(intergraph)
library(sna)
library(ergm)
# Convert igraph object to network object

```

```{r}
## test h1
giantGraph_all_network <- asNetwork(giantGraph_all)

model_h1 = ergm(giantGraph_all_network ~ edges + nodematch("phone_type"))
summary(model_h1)

```

```{r}
# test h2

betweenness_centrality <- betweenness(giantGraph_all, directed = TRUE)
eigen_centrality <- eigen_centrality(giantGraph_all)$vector

V(giantGraph_all)$betweenness_centrality <- betweenness_centrality
V(giantGraph_all)$eigen_centrality <- eigen_centrality
giantGraph_all_network <- asNetwork(giantGraph_all)

model_h2 <- ergm(giantGraph_all_network ~ edges + nodecov("betweenness_centrality") + nodecov("eigen_centrality"))
summary(model_h2)
```

```{r}
# test h3
total_degree_activity <- degree(giantGraph_all)
V(giantGraph_all)$transaction_activity <- total_degree_activity

threshold <- quantile(total_degree_activity, 0.9)
V(giantGraph_all)$key_influencer <- ifelse(total_degree_activity > threshold, 1, 0)

giantGraph_all_network <- asNetwork(giantGraph_all)

model_h3 <- ergm(giantGraph_all_network ~ edges + 
                   nodecov("transaction_activity") + 
                   nodecov("key_influencer") + 
                   nodecov("transaction_activity") * nodecov("key_influencer"))
summary(model_h3)

```

```{r}
# test h4 
V(giantGraph_all)$is_iphone <- ifelse(V(giantGraph_all)$phone_type == "Venmo for iPhone", 1, 0)
giantGraph_all_network <- asNetwork(giantGraph_all)

model_H4 <- ergm(giantGraph_all_network ~ edges + nodeocov("is_iphone"))
summary(model_H4)

```

```{r}
# test h5
giantGraph_all_network <- asNetwork(giantGraph_all)
model_H5 <- ergm(giantGraph_all_network ~ edges + mutual + nodematch("key_influencer"))
summary(model_H5)

```

```{r}
library(dplyr)
library(lubridate)

# If the network has dynamic attributes, remove them (clear any onset/terminus)
if (!is.null(giantGraph_all_network$dynamic)) {
  giantGraph_all_network <- asNetwork(asIgraph(giantGraph_all_network))
}

# Create a season variable based on the month of each transaction
giantGraph_all_network %v% "season" <- case_when(
  month(giantGraph_all_network %v% "date") %in% c(12, 1, 2) ~ "Winter",
  month(giantGraph_all_network %v% "date") %in% c(3, 4, 5) ~ "Spring",
  month(giantGraph_all_network %v% "date") %in% c(6, 7, 8) ~ "Summer",
  month(giantGraph_all_network %v% "date") %in% c(9, 10, 11) ~ "Fall",
  TRUE ~ "Unknown"
)

# Convert the season categories to numeric values
giantGraph_all_network %v% "season_numeric" <- case_when(
  giantGraph_all_network %v% "season" == "Winter" ~ 1,
  giantGraph_all_network %v% "season" == "Spring" ~ 2,
  giantGraph_all_network %v% "season" == "Summer" ~ 3,
  giantGraph_all_network %v% "season" == "Fall" ~ 4,
  giantGraph_all_network %v% "season" == "Unknown" ~ NA_real_
)

# Remove nodes with NA values in the season_numeric variable
valid_nodes <- !is.na(giantGraph_all_network %v% "season_numeric")
giantGraph_all_network <- network.extract(giantGraph_all_network, valid_nodes)

# Fit the ERGM model using the numeric season variable
model_season <- ergm(giantGraph_all_network ~ 
                       edges + 
                       nodecov("season_numeric"))

summary(model_season)
```

```{r}
library(intergraph)
library(sna)


# test h2

betweenness_centrality <- betweenness(giantGraph_all, directed = TRUE)
eigen_centrality <- eigen_centrality(giantGraph_all)$vector



V(giantGraph_all)$betweenness_centrality <- betweenness_centrality
V(giantGraph_all)$eigen_centrality <- eigen_centrality
giantGraph_all_network <- asNetwork(giantGraph_all)

model_h2 <- ergm(giantGraph_all_network ~ edges + nodecov("betweenness_centrality") + nodecov("eigen_centrality"))
summary(model_h2)


```

```{r}

gof1 <- gof(model_h1, verbose=T, burnin=1e+5, interval=1e+5, control = control.gof.ergm(nsim = 200))
plot(gof1)

gof2 <- gof(model_h2, verbose=T, burnin=1e+5, interval=1e+5, control = control.gof.ergm(nsim = 200))
plot(gof2)
gof3 <- gof(model_h3, verbose=T, burnin=1e+5, interval=1e+5, control = control.gof.ergm(nsim = 200))
plot(gof3)
gof4 <- gof(model_h4, verbose=T, burnin=1e+5, interval=1e+5, control = control.gof.ergm(nsim = 200))
plot(fog4)
go5 <- gof(model_h5, verbose=T, burnin=1e+5, interval=1e+5, control = control.gof.ergm(nsim = 200))
plot(gof5)
gof6 <- gof(model_h6, verbose=T, burnin=1e+5, interval=1e+5, control = control.gof.ergm(nsim = 200))
plot(gof6)
```
